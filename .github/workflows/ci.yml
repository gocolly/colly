---
name: CI
on:
  push:
    branches:
      - '**'
  pull_request:

jobs:
  test:
    name: Test ${{matrix.go}}
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        go: [
          "1.22",
          "1.21",
          "1.20",
          "1.19",
        ]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{matrix.go}}

      - name: Test
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          OUT="$(go get -a)"; test -z "$OUT" || (echo "$OUT" && return 1)
          OUT="$(gofmt -l -d ./)"; test -z "$OUT" || (echo "$OUT" && return 1)
          golangci-lint run
          go vet -v ./...
          go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...

  build:
    name: Build ${{matrix.go}}
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        go: [
          "1.22",
          "1.21",
          "1.20",
          "1.19",
        ]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{matrix.go}}

      - name: Build
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          OUT="$(go get -a)"; test -z "$OUT" || (echo "$OUT" && return 1)
          OUT="$(gofmt -l -d ./)"; test -z "$OUT" || (echo "$OUT" && return 1)
          golangci-lint run
          go build

  codecov:
    name: Codecov
    runs-on: [ubuntu-latest]
    needs:
      - test
      - build
    steps:
      - name: Run Codecov
        run: bash <(curl -s https://codecov.io/bash)
